## SYSLOG发送配置
     syslog {
          type => "syslog"
          port => 514
          codec => plain {
          charset => "UTF-8" }
          }

## 文件发送配置
     file {
          path => "/home/logs/*.log"
          start_position => "beginning"
          codec => plain {
          charset => "GBK" }
          type => "file"
     }

## Logstash-Forwarder接收配置
     lumberjack {
          port => 6782
          ssl_certificate => "/etc/logstash/server.crt"
          ssl_key => "/etc/logstash/server.key"
          type => "forwarder"
     }

## Json格式配置
     tcp {
          type => "monitor"
          port => 514
          codec => json {
          charset => "UTF-8" }
     }

## Netflow接收配置
     udp {
          type => "netflow"
          port => 2055
          codec => netflow
     }

## SNMPTrap接收配置
     snmptrap  {
          community => "snmp"
          type => "snmptrap"
          port => 1062
          }

## Redis接收配置
     redis {
          host => "10.0.0.178"
          port => 6379
          data_type => "list"
          key => "biglog"
     }

## 自动生成日志配置
     generator {
          type => "test"
          message => "118.137.224.185 - - [14/Jul/2014:15:27:45 +0800] GET /usercenter/login_datason.jsp?callback=jQuery18305208275022450835_1405322856752&_=1405322858111 HTTP/1.1 200 71 http://www.zooboa.com/; Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Maxthon/3.0 Chrome/22.0.1229.79 Safari/537.1 0.006 0.006 ."
          count => 100000000000000000000
     }
###################################################
filter {

## Grok分割配置
     grok {
          type => "nginx"
          pattern => "%{NGINX}"
          patterns_dir => "/home/logstash/patterns"
          add_tag => "nginx"
     }

## 日期匹配设置
     date {
          tags => "nginx"
          match => [ "timestamp", "dd/MMM/YYYY:HH:mm:ss Z" ]
          add_tag => [ "dated" ]
}

## GeoIP设置
     geoip {
          tags => "nginx"
          source => "clientip"
          add_tag => [ "geoip" ]
          database => "/home/logstash/vendor/geoip/GeoLiteCity.dat"
          }
     geoip {
          tags => "nginx"
          source => "clientip"
          database => "/home/logstash/vendor/geoip/GeoIPASNum.dat"
     }

## KeyValue配置
     kv {
          type =>  "nginx"
          source => "request"
          field_split => "&?"
          value_split => "="
     }

## URL解码配置
     urldecode {
          type => "nginx"
          all_fields => true
          #field => [ "request", "referrer" ]
     }

## UserAgent解码配置
     useragent {
          tags => "nginx"
          source => "agent"
     }

## 字段更改配置
     mutate {
          convert => [ "[geoip][coordinates]", "float" ]
          convert => [ "bodybytes", "integer" ]
          replace => [ "message", "%{timestamp} %{description}" ]
          update => [ "domain", "bestdomain" ]
          rename => [ "domain", "newdomain" ]
          gsub => [ "domain", "d.colafile.com", "newdomain" ]
          add_field => { "fullurl" => "%{domain}%{request}" }
     }

## 数据统计配置
     metrics {
          type => "syslog"
          #meter => "http.%{status}"
          meter => "events"
          add_tag => "metric"
          add_field => { "newmessage" => "rate: %{events.rate_1m},that in %{events.count}" }
          rates => [1]
          }

## 安全检测模块
     grep {
          tags => "nginx"
          match => ["request","(\w+)'|(\w+)%20and%20(\S+)|(\w+)%20or%20(\S+)|select%20|insert%20|%20from%20|%20where%20|union%20|DECLARE%20@S%20CHAR|%20AS%20CHAR"]
          add_tag => "SQL Injection Attack"
          drop => "false"
     }
     grep {
          tags => "nginx"
          match => ["request","(\S)%3C(\S+)%3E|(\S)%3C(\S+)%2F%3E|(\S+)<(\S+)>|(\S+)<(\S+)\/>|onerror|onmouse|expression|\"|alert|document\.|prompt\("]
          add_tag => "XSS Attack"
          drop => "false"
     }
     grep {
          tags => "nginx"
          match => ["request","/etc/passwd|\/%c0%ae%c0%ae|\/%2E%2E|boot\.ini|win\.ini|\.\.\/|access\.log|httpd\.conf|nginx\.conf|/proc/self/environ"]
          add_tag => "File Include Attack"
          drop => "false"
     }
     grep {
          tags => "nginx"
          match => ["request","denyMethodExecution|allowStaticMethodAccess"]
          add_tag => "Strus2 Attack"
          drop => "false"
     }
     grep {
          tags => "nginx"
          match => ["request","\/cmd\.asp|\/diy\.asp|\.asp;|\/(\w+)\.(\w+)\/(\w+)\.php|\.php\.|eval\(|%eval|\.jsp?action=|fsaction=",status,"200"]
          add_tag => "BackDoor Attack"
          drop => "false"
     }
     grep {
          tags => "nginx"
          match => ["useragent","HTTrack|harvest|audit|dirbuster|pangolin|nmap|sqln|-scan|hydra|Parser|libwww|BBBike|sqlmap|w3af|owasp|Nikto|fimap|havij|PycURL|zmeu|BabyKrokodil|netsparker|httperf|bench"]
          add_tag => "WebScan Attack"
          drop => "false"
     }

## 字段翻译配置
     translate {
          tags => "nginx"
          field => "appname"
          destination => "appname2"
          dictionary => [ "17", "UDP",
                    "6", "TCP",
                    "112", "VRRP" ]
          dictionary_path => "/home/translate/appname"
     }
     translate {
          tags => "nginx"
          field => "[geoip][real_region_name]"  ##针对类似netflow.protocol 也用 [netflow][protocol]
          destination => "province"
          dictionary_path => "/home/translate/province"
     }

## DNS解析配置
     dns {
          type => "syslog"
          reverse => [ "clientip" ]
          resolve => [ "www.xx.com" ]
          action => "append"
          nameserver => "8.8.8.8"
          add_tag => "dnsed"
          }

###################################################
output {
## 单机版
     elasticsearch {
     host => "127.0.0.1"
     }

## 集群版
     elasticsearch {
          host => "10.0.0.181"
          cluster => "biglog"
          index => "biglog-%{+YYYY.MM.dd}"
          }
     }

## 输出到文件
     file {
          path => "/path/to/file"
          message_format => "%{message}"
     }

     stdout {
          tags => "metric"
          codec => line {
          format => "rate: %{events.rate_1m},that in %{events.count}"
     }
     }

## 邮件告警
     email {
     from => "biglog.alert@biglog.org"
     match =>  [
          "Error 504 Gateway Timeout", "status,400"
          ]
     subject => "%{matchName}"
     to => "zooboa@gmail.com"
     via => "smtp"
     body => "Here is the event line that occured: %{message}"
     htmlbody => "<h2>%{matchName}</h2><br/><br/><h3>Full Event</h3><br/><br/><div align='center'>%{message}</div>"
     }

## Redis输出通过Awesant
     redis {
          type syslog
          key biglog
          host 10.240.20.13
          port 6379
          database 0
     }
    
     zeromq {
          address => ["tcp://0.0.0.0:2112"]
          mode => "server"
          topology => "pushpull"
          tags => ["geoip"]
     }
}
